// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package baseplate

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

//A raw authentication token as returned by the authentication service.
//
type AuthenticationToken string

func AuthenticationTokenPtr(v AuthenticationToken) *AuthenticationToken { return &v }

// The components of the Reddit LoID cookie that we want to propogate between
// services.
// 
// This model is a component of the "Edge-Request" header.  You should not need to
// interact with this model directly, but rather through the EdgeRequestContext
// interface provided by baseplate.
// 
// 
// Attributes:
//  - ID: The ID of the LoID cookie.
// 
//  - CreatedMs: The time when the LoID cookie was created in epoch milliseconds.
// 
type Loid struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
  CreatedMs int64 `thrift:"created_ms,2" db:"created_ms" json:"created_ms"`
}

func NewLoid() *Loid {
  return &Loid{}
}


func (p *Loid) GetID() string {
  return p.ID
}

func (p *Loid) GetCreatedMs() int64 {
  return p.CreatedMs
}
func (p *Loid) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Loid)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Loid)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CreatedMs = v
}
  return nil
}

func (p *Loid) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Loid"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Loid) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Loid) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("created_ms", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:created_ms: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreatedMs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.created_ms (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:created_ms: ", p), err) }
  return err
}

func (p *Loid) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Loid(%+v)", *p)
}

// The components of the Reddit Session tracker cookie that we want to
// propogate between services.
// 
// This model is a component of the "Edge-Request" header.  You should not need to
// interact with this model directly, but rather through the EdgeRequestContext
// interface provided by baseplate.
// 
// 
// Attributes:
//  - ID: The ID of the Session tracker cookie.
// 
type Session struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
}

func NewSession() *Session {
  return &Session{}
}


func (p *Session) GetID() string {
  return p.ID
}
func (p *Session) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Session)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Session) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Session"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Session) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Session) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Session(%+v)", *p)
}

// Container model for the Edge-Request context header.
// 
// Baseplate will automatically parse this from the "Edge-Request" header and
// provides an interface that wraps this Thrift model.  You should not need to
// interact with this model directly, but rather through the EdgeRequestContext
// interface provided by baseplate.
// 
// 
// Attributes:
//  - Loid
//  - Session
//  - AuthenticationToken
type Request struct {
  Loid *Loid `thrift:"loid,1" db:"loid" json:"loid"`
  Session *Session `thrift:"session,2" db:"session" json:"session"`
  AuthenticationToken AuthenticationToken `thrift:"authentication_token,3" db:"authentication_token" json:"authentication_token"`
}

func NewRequest() *Request {
  return &Request{}
}

var Request_Loid_DEFAULT *Loid
func (p *Request) GetLoid() *Loid {
  if !p.IsSetLoid() {
    return Request_Loid_DEFAULT
  }
return p.Loid
}
var Request_Session_DEFAULT *Session
func (p *Request) GetSession() *Session {
  if !p.IsSetSession() {
    return Request_Session_DEFAULT
  }
return p.Session
}

func (p *Request) GetAuthenticationToken() AuthenticationToken {
  return p.AuthenticationToken
}
func (p *Request) IsSetLoid() bool {
  return p.Loid != nil
}

func (p *Request) IsSetSession() bool {
  return p.Session != nil
}

func (p *Request) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Request)  ReadField1(iprot thrift.TProtocol) error {
  p.Loid = &Loid{}
  if err := p.Loid.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Loid), err)
  }
  return nil
}

func (p *Request)  ReadField2(iprot thrift.TProtocol) error {
  p.Session = &Session{}
  if err := p.Session.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Session), err)
  }
  return nil
}

func (p *Request)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := AuthenticationToken(v)
  p.AuthenticationToken = temp
}
  return nil
}

func (p *Request) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Request) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("loid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:loid: ", p), err) }
  if err := p.Loid.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Loid), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:loid: ", p), err) }
  return err
}

func (p *Request) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:session: ", p), err) }
  if err := p.Session.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Session), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:session: ", p), err) }
  return err
}

func (p *Request) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authentication_token", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:authentication_token: ", p), err) }
  if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authentication_token (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:authentication_token: ", p), err) }
  return err
}

func (p *Request) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Request(%+v)", *p)
}

type BaseplateService interface {  //The base for any baseplate-based service.
  //
  //Your service should inherit from this one so that common tools can interact
  //with any expected interfaces.
  //

  // Return whether or not the service is healthy.
  // 
  // The healthchecker (baseplate.server.healthcheck) expects this endpoint to
  // exist so it can determine your service's health.
  // 
  // This should return True if the service is healthy. If the service is
  // unhealthy, it can return False or raise an exception.
  // 
  IsHealthy(ctx context.Context) (r bool, err error)
}

//The base for any baseplate-based service.
//
//Your service should inherit from this one so that common tools can interact
//with any expected interfaces.
//
type BaseplateServiceClient struct {
  c thrift.TClient
}

func NewBaseplateServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BaseplateServiceClient {
  return &BaseplateServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewBaseplateServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BaseplateServiceClient {
  return &BaseplateServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewBaseplateServiceClient(c thrift.TClient) *BaseplateServiceClient {
  return &BaseplateServiceClient{
    c: c,
  }
}

func (p *BaseplateServiceClient) Client_() thrift.TClient {
  return p.c
}
// Return whether or not the service is healthy.
// 
// The healthchecker (baseplate.server.healthcheck) expects this endpoint to
// exist so it can determine your service's health.
// 
// This should return True if the service is healthy. If the service is
// unhealthy, it can return False or raise an exception.
// 
func (p *BaseplateServiceClient) IsHealthy(ctx context.Context) (r bool, err error) {
  var _args0 BaseplateServiceIsHealthyArgs
  var _result1 BaseplateServiceIsHealthyResult
  if err = p.Client_().Call(ctx, "is_healthy", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

type BaseplateServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler BaseplateService
}

func (p *BaseplateServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *BaseplateServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *BaseplateServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewBaseplateServiceProcessor(handler BaseplateService) *BaseplateServiceProcessor {

  self2 := &BaseplateServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self2.processorMap["is_healthy"] = &baseplateServiceProcessorIsHealthy{handler:handler}
return self2
}

func (p *BaseplateServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x3 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x3.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x3

}

type baseplateServiceProcessorIsHealthy struct {
  handler BaseplateService
}

func (p *baseplateServiceProcessorIsHealthy) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BaseplateServiceIsHealthyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("is_healthy", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BaseplateServiceIsHealthyResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.IsHealthy(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing is_healthy: " + err2.Error())
    oprot.WriteMessageBegin("is_healthy", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("is_healthy", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

type BaseplateServiceIsHealthyArgs struct {
}

func NewBaseplateServiceIsHealthyArgs() *BaseplateServiceIsHealthyArgs {
  return &BaseplateServiceIsHealthyArgs{}
}

func (p *BaseplateServiceIsHealthyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BaseplateServiceIsHealthyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("is_healthy_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BaseplateServiceIsHealthyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BaseplateServiceIsHealthyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BaseplateServiceIsHealthyResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBaseplateServiceIsHealthyResult() *BaseplateServiceIsHealthyResult {
  return &BaseplateServiceIsHealthyResult{}
}

var BaseplateServiceIsHealthyResult_Success_DEFAULT bool
func (p *BaseplateServiceIsHealthyResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return BaseplateServiceIsHealthyResult_Success_DEFAULT
  }
return *p.Success
}
func (p *BaseplateServiceIsHealthyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BaseplateServiceIsHealthyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BaseplateServiceIsHealthyResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *BaseplateServiceIsHealthyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("is_healthy_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BaseplateServiceIsHealthyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BaseplateServiceIsHealthyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BaseplateServiceIsHealthyResult(%+v)", *p)
}


