// Code generated by Thrift Compiler (0.14.0). DO NOT EDIT.

package baseplate

import(
	"bytes"
	"context"
	"reflect"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = time.Now
var _ = bytes.Equal

//The different types of probes supported by is_healthy endpoint.
//
//Please refer to Kubernetes' documentation for the differences between them:
//https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
//
//Your service should use Readiness probe as the fallback for unsupported probes.
//
//Note that the HTTP health check could use the string names of the probes,
//so changing the names, even without changing the numeric values,
//is considered as breaking change and should be avoided.
//
type IsHealthyProbe int64
const (
  IsHealthyProbe_READINESS IsHealthyProbe = 1
  IsHealthyProbe_LIVENESS IsHealthyProbe = 2
  IsHealthyProbe_STARTUP IsHealthyProbe = 3
)

func (p IsHealthyProbe) String() string {
  switch p {
  case IsHealthyProbe_READINESS: return "READINESS"
  case IsHealthyProbe_LIVENESS: return "LIVENESS"
  case IsHealthyProbe_STARTUP: return "STARTUP"
  }
  return "<UNSET>"
}

func IsHealthyProbeFromString(s string) (IsHealthyProbe, error) {
  switch s {
  case "READINESS": return IsHealthyProbe_READINESS, nil 
  case "LIVENESS": return IsHealthyProbe_LIVENESS, nil 
  case "STARTUP": return IsHealthyProbe_STARTUP, nil 
  }
  return IsHealthyProbe(0), fmt.Errorf("not a valid IsHealthyProbe string")
}


func IsHealthyProbePtr(v IsHealthyProbe) *IsHealthyProbe { return &v }

func (p IsHealthyProbe) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *IsHealthyProbe) UnmarshalText(text []byte) error {
q, err := IsHealthyProbeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *IsHealthyProbe) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = IsHealthyProbe(v)
return nil
}

func (p * IsHealthyProbe) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//The integer values within this enum correspond to HTTP status codes.
//
//HTTP layers can easily map errors to an appropriate status code.
type ErrorCode int64
const (
  ErrorCode_BAD_REQUEST ErrorCode = 400
  ErrorCode_UNAUTHORIZED ErrorCode = 401
  ErrorCode_PAYMENT_REQUIRED ErrorCode = 402
  ErrorCode_FORBIDDEN ErrorCode = 403
  ErrorCode_NOT_FOUND ErrorCode = 404
  ErrorCode_CONFLICT ErrorCode = 409
  ErrorCode_GONE ErrorCode = 410
  ErrorCode_PRECONDITION_FAILED ErrorCode = 412
  ErrorCode_PAYLOAD_TOO_LARGE ErrorCode = 413
  ErrorCode_IM_A_TEAPOT ErrorCode = 418
  ErrorCode_MISDIRECTED_REQUEST ErrorCode = 421
  ErrorCode_UNPROCESSABLE_ENTITY ErrorCode = 422
  ErrorCode_LOCKED ErrorCode = 423
  ErrorCode_FAILED_DEPENDENCY ErrorCode = 424
  ErrorCode_TOO_EARLY ErrorCode = 425
  ErrorCode_PRECONDITION_REQUIRED ErrorCode = 428
  ErrorCode_TOO_MANY_REQUESTS ErrorCode = 429
  ErrorCode_REQUEST_HEADER_FIELDS_TOO_LARGE ErrorCode = 431
  ErrorCode_UNAVAILABLE_FOR_LEGAL_REASONS ErrorCode = 451
  ErrorCode_INTERNAL_SERVER_ERROR ErrorCode = 500
  ErrorCode_NOT_IMPLEMENTED ErrorCode = 501
  ErrorCode_BAD_GATEWAY ErrorCode = 502
  ErrorCode_SERVICE_UNAVAILABLE ErrorCode = 503
  ErrorCode_TIMEOUT ErrorCode = 504
  ErrorCode_INSUFFICIENT_STORAGE ErrorCode = 507
  ErrorCode_LOOP_DETECTED ErrorCode = 508
  ErrorCode_USER_DEFINED ErrorCode = 1000
)

func (p ErrorCode) String() string {
  switch p {
  case ErrorCode_BAD_REQUEST: return "BAD_REQUEST"
  case ErrorCode_UNAUTHORIZED: return "UNAUTHORIZED"
  case ErrorCode_PAYMENT_REQUIRED: return "PAYMENT_REQUIRED"
  case ErrorCode_FORBIDDEN: return "FORBIDDEN"
  case ErrorCode_NOT_FOUND: return "NOT_FOUND"
  case ErrorCode_CONFLICT: return "CONFLICT"
  case ErrorCode_GONE: return "GONE"
  case ErrorCode_PRECONDITION_FAILED: return "PRECONDITION_FAILED"
  case ErrorCode_PAYLOAD_TOO_LARGE: return "PAYLOAD_TOO_LARGE"
  case ErrorCode_IM_A_TEAPOT: return "IM_A_TEAPOT"
  case ErrorCode_MISDIRECTED_REQUEST: return "MISDIRECTED_REQUEST"
  case ErrorCode_UNPROCESSABLE_ENTITY: return "UNPROCESSABLE_ENTITY"
  case ErrorCode_LOCKED: return "LOCKED"
  case ErrorCode_FAILED_DEPENDENCY: return "FAILED_DEPENDENCY"
  case ErrorCode_TOO_EARLY: return "TOO_EARLY"
  case ErrorCode_PRECONDITION_REQUIRED: return "PRECONDITION_REQUIRED"
  case ErrorCode_TOO_MANY_REQUESTS: return "TOO_MANY_REQUESTS"
  case ErrorCode_REQUEST_HEADER_FIELDS_TOO_LARGE: return "REQUEST_HEADER_FIELDS_TOO_LARGE"
  case ErrorCode_UNAVAILABLE_FOR_LEGAL_REASONS: return "UNAVAILABLE_FOR_LEGAL_REASONS"
  case ErrorCode_INTERNAL_SERVER_ERROR: return "INTERNAL_SERVER_ERROR"
  case ErrorCode_NOT_IMPLEMENTED: return "NOT_IMPLEMENTED"
  case ErrorCode_BAD_GATEWAY: return "BAD_GATEWAY"
  case ErrorCode_SERVICE_UNAVAILABLE: return "SERVICE_UNAVAILABLE"
  case ErrorCode_TIMEOUT: return "TIMEOUT"
  case ErrorCode_INSUFFICIENT_STORAGE: return "INSUFFICIENT_STORAGE"
  case ErrorCode_LOOP_DETECTED: return "LOOP_DETECTED"
  case ErrorCode_USER_DEFINED: return "USER_DEFINED"
  }
  return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
  switch s {
  case "BAD_REQUEST": return ErrorCode_BAD_REQUEST, nil 
  case "UNAUTHORIZED": return ErrorCode_UNAUTHORIZED, nil 
  case "PAYMENT_REQUIRED": return ErrorCode_PAYMENT_REQUIRED, nil 
  case "FORBIDDEN": return ErrorCode_FORBIDDEN, nil 
  case "NOT_FOUND": return ErrorCode_NOT_FOUND, nil 
  case "CONFLICT": return ErrorCode_CONFLICT, nil 
  case "GONE": return ErrorCode_GONE, nil 
  case "PRECONDITION_FAILED": return ErrorCode_PRECONDITION_FAILED, nil 
  case "PAYLOAD_TOO_LARGE": return ErrorCode_PAYLOAD_TOO_LARGE, nil 
  case "IM_A_TEAPOT": return ErrorCode_IM_A_TEAPOT, nil 
  case "MISDIRECTED_REQUEST": return ErrorCode_MISDIRECTED_REQUEST, nil 
  case "UNPROCESSABLE_ENTITY": return ErrorCode_UNPROCESSABLE_ENTITY, nil 
  case "LOCKED": return ErrorCode_LOCKED, nil 
  case "FAILED_DEPENDENCY": return ErrorCode_FAILED_DEPENDENCY, nil 
  case "TOO_EARLY": return ErrorCode_TOO_EARLY, nil 
  case "PRECONDITION_REQUIRED": return ErrorCode_PRECONDITION_REQUIRED, nil 
  case "TOO_MANY_REQUESTS": return ErrorCode_TOO_MANY_REQUESTS, nil 
  case "REQUEST_HEADER_FIELDS_TOO_LARGE": return ErrorCode_REQUEST_HEADER_FIELDS_TOO_LARGE, nil 
  case "UNAVAILABLE_FOR_LEGAL_REASONS": return ErrorCode_UNAVAILABLE_FOR_LEGAL_REASONS, nil 
  case "INTERNAL_SERVER_ERROR": return ErrorCode_INTERNAL_SERVER_ERROR, nil 
  case "NOT_IMPLEMENTED": return ErrorCode_NOT_IMPLEMENTED, nil 
  case "BAD_GATEWAY": return ErrorCode_BAD_GATEWAY, nil 
  case "SERVICE_UNAVAILABLE": return ErrorCode_SERVICE_UNAVAILABLE, nil 
  case "TIMEOUT": return ErrorCode_TIMEOUT, nil 
  case "INSUFFICIENT_STORAGE": return ErrorCode_INSUFFICIENT_STORAGE, nil 
  case "LOOP_DETECTED": return ErrorCode_LOOP_DETECTED, nil 
  case "USER_DEFINED": return ErrorCode_USER_DEFINED, nil 
  }
  return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}


func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }

func (p ErrorCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ErrorCode) UnmarshalText(text []byte) error {
q, err := ErrorCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ErrorCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ErrorCode(v)
return nil
}

func (p * ErrorCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//A raw authentication token as returned by the authentication service.
//
type AuthenticationToken string

func AuthenticationTokenPtr(v AuthenticationToken) *AuthenticationToken { return &v }

//A two-character ISO 3166-1 country code
//
type CountryCode string

func CountryCodePtr(v CountryCode) *CountryCode { return &v }

//An integer measuring the number of milliseconds of UTC time since epoch.
//
type TimestampMilliseconds int64

func TimestampMillisecondsPtr(v TimestampMilliseconds) *TimestampMilliseconds { return &v }

// The arg struct for is_healthy endpoint.
// 
// 
// Attributes:
//  - Probe
type IsHealthyRequest struct {
  Probe *IsHealthyProbe `thrift:"probe,1" db:"probe" json:"probe,omitempty"`
}

func NewIsHealthyRequest() *IsHealthyRequest {
  return &IsHealthyRequest{}
}

var IsHealthyRequest_Probe_DEFAULT IsHealthyProbe
func (p *IsHealthyRequest) GetProbe() IsHealthyProbe {
  if !p.IsSetProbe() {
    return IsHealthyRequest_Probe_DEFAULT
  }
return *p.Probe
}
func (p *IsHealthyRequest) IsSetProbe() bool {
  return p.Probe != nil
}

func (p *IsHealthyRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IsHealthyRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := IsHealthyProbe(v)
  p.Probe = &temp
}
  return nil
}

func (p *IsHealthyRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IsHealthyRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IsHealthyRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetProbe() {
    if err := oprot.WriteFieldBegin(ctx, "probe", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:probe: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Probe)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.probe (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:probe: ", p), err) }
  }
  return err
}

func (p *IsHealthyRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsHealthyRequest(%+v)", *p)
}

// The components of the Reddit LoID cookie that we want to propagate between
// services.
// 
// This model is a component of the "Edge-Request" header.  You should not need to
// interact with this model directly, but rather through the EdgeRequestContext
// interface provided by baseplate.
// 
// 
// Attributes:
//  - ID: The ID of the LoID cookie.
// 
//  - CreatedMs: The time when the LoID cookie was created in epoch milliseconds.
// 
type Loid struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
  CreatedMs int64 `thrift:"created_ms,2" db:"created_ms" json:"created_ms"`
}

func NewLoid() *Loid {
  return &Loid{}
}


func (p *Loid) GetID() string {
  return p.ID
}

func (p *Loid) GetCreatedMs() int64 {
  return p.CreatedMs
}
func (p *Loid) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Loid)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Loid)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CreatedMs = v
}
  return nil
}

func (p *Loid) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Loid"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Loid) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Loid) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "created_ms", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:created_ms: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CreatedMs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.created_ms (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:created_ms: ", p), err) }
  return err
}

func (p *Loid) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Loid(%+v)", *p)
}

// The components of the Reddit Session tracker cookie that we want to
// propagate between services.
// 
// This model is a component of the "Edge-Request" header.  You should not need to
// interact with this model directly, but rather through the EdgeRequestContext
// interface provided by baseplate.
// 
// 
// Attributes:
//  - ID: The ID of the Session tracker cookie.
// 
type Session struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
}

func NewSession() *Session {
  return &Session{}
}


func (p *Session) GetID() string {
  return p.ID
}
func (p *Session) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Session)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Session) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Session"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Session) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Session) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Session(%+v)", *p)
}

// The components of the device making a request to our services that we want to
// propogate between services.
// 
// This model is a component of the "Edge-Request" header.  You should not need to
// interact with this model directly, but rather through the EdgeRequestContext
// interface provided by baseplate.
// 
// 
// Attributes:
//  - ID: The ID of the device.
// 
type Device struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
}

func NewDevice() *Device {
  return &Device{}
}


func (p *Device) GetID() string {
  return p.ID
}
func (p *Device) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Device)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Device) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Device"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Device) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Device) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Device(%+v)", *p)
}

// Metadata about the origin service for a request.
// 
// The "origin" service is the service responsible for handling the request from
// the client.
// 
// This model is a component of the "Edge-Request" header.  You should not need to
// interact with this model directly, but rather through the EdgeRequestContext
// interface provided by baseplate.
// 
// Attributes:
//  - Name: The name of the origin service.
// 
type OriginService struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
}

func NewOriginService() *OriginService {
  return &OriginService{}
}


func (p *OriginService) GetName() string {
  return p.Name
}
func (p *OriginService) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OriginService)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *OriginService) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "OriginService"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OriginService) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *OriginService) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OriginService(%+v)", *p)
}

// Geolocation data from a request to our services that we want to
// propagate between services.
// 
// This model is a component of the "Edge-Request" header.  You should not need to
// interact with this model directly, but rather through the EdgeRequestContext
// interface provided by baseplate.
// 
// 
// Attributes:
//  - CountryCode: The country code of the requesting client.
type Geolocation struct {
  CountryCode CountryCode `thrift:"country_code,1" db:"country_code" json:"country_code"`
}

func NewGeolocation() *Geolocation {
  return &Geolocation{}
}


func (p *Geolocation) GetCountryCode() CountryCode {
  return p.CountryCode
}
func (p *Geolocation) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Geolocation)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := CountryCode(v)
  p.CountryCode = temp
}
  return nil
}

func (p *Geolocation) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Geolocation"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Geolocation) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "country_code", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:country_code: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CountryCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.country_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:country_code: ", p), err) }
  return err
}

func (p *Geolocation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Geolocation(%+v)", *p)
}

// Container model for the Edge-Request context header.
// 
// Baseplate will automatically parse this from the "Edge-Request" header and
// provides an interface that wraps this Thrift model.  You should not need to
// interact with this model directly, but rather through the EdgeRequestContext
// interface provided by baseplate.
// 
// 
// Attributes:
//  - Loid
//  - Session
//  - AuthenticationToken
//  - Device
//  - OriginService
//  - Geolocation
type Request struct {
  Loid *Loid `thrift:"loid,1" db:"loid" json:"loid"`
  Session *Session `thrift:"session,2" db:"session" json:"session"`
  AuthenticationToken AuthenticationToken `thrift:"authentication_token,3" db:"authentication_token" json:"authentication_token"`
  Device *Device `thrift:"device,4" db:"device" json:"device"`
  OriginService *OriginService `thrift:"origin_service,5" db:"origin_service" json:"origin_service"`
  Geolocation *Geolocation `thrift:"geolocation,6" db:"geolocation" json:"geolocation"`
}

func NewRequest() *Request {
  return &Request{}
}

var Request_Loid_DEFAULT *Loid
func (p *Request) GetLoid() *Loid {
  if !p.IsSetLoid() {
    return Request_Loid_DEFAULT
  }
return p.Loid
}
var Request_Session_DEFAULT *Session
func (p *Request) GetSession() *Session {
  if !p.IsSetSession() {
    return Request_Session_DEFAULT
  }
return p.Session
}

func (p *Request) GetAuthenticationToken() AuthenticationToken {
  return p.AuthenticationToken
}
var Request_Device_DEFAULT *Device
func (p *Request) GetDevice() *Device {
  if !p.IsSetDevice() {
    return Request_Device_DEFAULT
  }
return p.Device
}
var Request_OriginService_DEFAULT *OriginService
func (p *Request) GetOriginService() *OriginService {
  if !p.IsSetOriginService() {
    return Request_OriginService_DEFAULT
  }
return p.OriginService
}
var Request_Geolocation_DEFAULT *Geolocation
func (p *Request) GetGeolocation() *Geolocation {
  if !p.IsSetGeolocation() {
    return Request_Geolocation_DEFAULT
  }
return p.Geolocation
}
func (p *Request) IsSetLoid() bool {
  return p.Loid != nil
}

func (p *Request) IsSetSession() bool {
  return p.Session != nil
}

func (p *Request) IsSetDevice() bool {
  return p.Device != nil
}

func (p *Request) IsSetOriginService() bool {
  return p.OriginService != nil
}

func (p *Request) IsSetGeolocation() bool {
  return p.Geolocation != nil
}

func (p *Request) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Request)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Loid = &Loid{}
  if err := p.Loid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Loid), err)
  }
  return nil
}

func (p *Request)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Session = &Session{}
  if err := p.Session.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Session), err)
  }
  return nil
}

func (p *Request)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := AuthenticationToken(v)
  p.AuthenticationToken = temp
}
  return nil
}

func (p *Request)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.Device = &Device{}
  if err := p.Device.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Device), err)
  }
  return nil
}

func (p *Request)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.OriginService = &OriginService{}
  if err := p.OriginService.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OriginService), err)
  }
  return nil
}

func (p *Request)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  p.Geolocation = &Geolocation{}
  if err := p.Geolocation.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Geolocation), err)
  }
  return nil
}

func (p *Request) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Request) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "loid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:loid: ", p), err) }
  if err := p.Loid.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Loid), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:loid: ", p), err) }
  return err
}

func (p *Request) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "session", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:session: ", p), err) }
  if err := p.Session.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Session), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:session: ", p), err) }
  return err
}

func (p *Request) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authentication_token", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:authentication_token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthenticationToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authentication_token (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:authentication_token: ", p), err) }
  return err
}

func (p *Request) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "device", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:device: ", p), err) }
  if err := p.Device.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Device), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:device: ", p), err) }
  return err
}

func (p *Request) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "origin_service", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:origin_service: ", p), err) }
  if err := p.OriginService.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OriginService), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:origin_service: ", p), err) }
  return err
}

func (p *Request) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "geolocation", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:geolocation: ", p), err) }
  if err := p.Geolocation.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Geolocation), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:geolocation: ", p), err) }
  return err
}

func (p *Request) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Request(%+v)", *p)
}

// Attributes:
//  - Code: A code describing the general nature of the error.
// This should be specified for all errors. This field uses
// the i32 type instead of the ErrorCode type in order to give
// developers an escape hatch to define their own error codes.
// Developers should do their best to avoid defining a custom
// error code. Developers should use a value higher than 1000
// when defining custom codes.
//  - Message: A human-readable error message. It should both explain the error
// and offer an actionable resolution to it, if applicable. It should
// be safe to desplay this message in a user-facing client.
//  - Details: A map of additional error information. This is most useful
// when there is a validation error. The server may use this map
// to return multiple errors. This should be safe for clients to
// display. Example:
//     {
//         "post.title": "This field is too long.",
//         "post.kind": "This field is required."
//     }
type Error struct {
  Code *int32 `thrift:"code,1" db:"code" json:"code,omitempty"`
  Message *string `thrift:"message,2" db:"message" json:"message,omitempty"`
  Details map[string]string `thrift:"details,3" db:"details" json:"details,omitempty"`
}

func NewError() *Error {
  return &Error{}
}

var Error_Code_DEFAULT int32
func (p *Error) GetCode() int32 {
  if !p.IsSetCode() {
    return Error_Code_DEFAULT
  }
return *p.Code
}
var Error_Message_DEFAULT string
func (p *Error) GetMessage() string {
  if !p.IsSetMessage() {
    return Error_Message_DEFAULT
  }
return *p.Message
}
var Error_Details_DEFAULT map[string]string

func (p *Error) GetDetails() map[string]string {
  return p.Details
}
func (p *Error) IsSetCode() bool {
  return p.Code != nil
}

func (p *Error) IsSetMessage() bool {
  return p.Message != nil
}

func (p *Error) IsSetDetails() bool {
  return p.Details != nil
}

func (p *Error) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Error)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = &v
}
  return nil
}

func (p *Error)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = &v
}
  return nil
}

func (p *Error)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Details =  tMap
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.Details[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Error) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Error"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Error) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCode() {
    if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Code)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  }
  return err
}

func (p *Error) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMessage() {
    if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Message)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  }
  return err
}

func (p *Error) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDetails() {
    if err := oprot.WriteFieldBegin(ctx, "details", thrift.MAP, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:details: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Details)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Details {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:details: ", p), err) }
  }
  return err
}

func (p *Error) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Error(%+v)", *p)
}

func (p *Error) Error() string {
  return p.String()
}

type BaseplateService interface {  //The base for any baseplate-based service.
  //
  //Your service should inherit from this one so that common tools can interact
  //with any expected interfaces.
  //
  //DEPRECATED: Please migrate to BaseplateServiceV2.
  //

  // Return whether or not the service is healthy.
  // 
  // The healthchecker (baseplate.server.healthcheck) expects this endpoint to
  // exist so it can determine your service's health.
  // 
  // This should return True if the service is healthy. If the service is
  // unhealthy, it can return False or raise an exception.
  // 
  IsHealthy(ctx context.Context) (r bool, err error)
}

//The base for any baseplate-based service.
//
//Your service should inherit from this one so that common tools can interact
//with any expected interfaces.
//
//DEPRECATED: Please migrate to BaseplateServiceV2.
//
type BaseplateServiceClient struct {
  c thrift.TClient
}

func NewBaseplateServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BaseplateServiceClient {
  return &BaseplateServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewBaseplateServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BaseplateServiceClient {
  return &BaseplateServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewBaseplateServiceClient(c thrift.TClient) *BaseplateServiceClient {
  return &BaseplateServiceClient{
    c: c,
  }
}

func (p *BaseplateServiceClient) Client_() thrift.TClient {
  return p.c
}
// Return whether or not the service is healthy.
// 
// The healthchecker (baseplate.server.healthcheck) expects this endpoint to
// exist so it can determine your service's health.
// 
// This should return True if the service is healthy. If the service is
// unhealthy, it can return False or raise an exception.
// 
func (p *BaseplateServiceClient) IsHealthy(ctx context.Context) (r bool, err error) {
  var _args2 BaseplateServiceIsHealthyArgs
  var _result3 BaseplateServiceIsHealthyResult
  if err = p.Client_().Call(ctx, "is_healthy", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

type BaseplateServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler BaseplateService
}

func (p *BaseplateServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *BaseplateServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *BaseplateServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewBaseplateServiceProcessor(handler BaseplateService) *BaseplateServiceProcessor {

  self4 := &BaseplateServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self4.processorMap["is_healthy"] = &baseplateServiceProcessorIsHealthy{handler:handler}
return self4
}

func (p *BaseplateServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin(ctx)
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x5.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x5

}

type baseplateServiceProcessorIsHealthy struct {
  handler BaseplateService
}

func (p *baseplateServiceProcessorIsHealthy) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BaseplateServiceIsHealthyArgs{}
  if err = args.Read(ctx, iprot); err != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin(ctx, "is_healthy", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, err
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := BaseplateServiceIsHealthyResult{}
  var retval bool
  var err2 error
  if retval, err2 = p.handler.IsHealthy(ctx); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, err2
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing is_healthy: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "is_healthy", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "is_healthy", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

type BaseplateServiceIsHealthyArgs struct {
}

func NewBaseplateServiceIsHealthyArgs() *BaseplateServiceIsHealthyArgs {
  return &BaseplateServiceIsHealthyArgs{}
}

func (p *BaseplateServiceIsHealthyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BaseplateServiceIsHealthyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "is_healthy_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BaseplateServiceIsHealthyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BaseplateServiceIsHealthyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BaseplateServiceIsHealthyResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBaseplateServiceIsHealthyResult() *BaseplateServiceIsHealthyResult {
  return &BaseplateServiceIsHealthyResult{}
}

var BaseplateServiceIsHealthyResult_Success_DEFAULT bool
func (p *BaseplateServiceIsHealthyResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return BaseplateServiceIsHealthyResult_Success_DEFAULT
  }
return *p.Success
}
func (p *BaseplateServiceIsHealthyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BaseplateServiceIsHealthyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BaseplateServiceIsHealthyResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *BaseplateServiceIsHealthyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "is_healthy_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BaseplateServiceIsHealthyResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BaseplateServiceIsHealthyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BaseplateServiceIsHealthyResult(%+v)", *p)
}


type BaseplateServiceV2 interface {  //The base for any baseplate-based service.
  //
  //Your service should inherit from this one so that common tools can interact
  //with any expected interfaces.
  //

  // Return whether or not the service is healthy.
  // 
  // The healthchecker (baseplate.server.healthcheck) expects this endpoint to
  // exist so it can determine your service's health.
  // 
  // This should return True if the service is healthy. If the service is
  // unhealthy, it can return False or raise an exception.
  // 
  // 
  // Parameters:
  //  - Request
  IsHealthy(ctx context.Context, request *IsHealthyRequest) (r bool, err error)
}

//The base for any baseplate-based service.
//
//Your service should inherit from this one so that common tools can interact
//with any expected interfaces.
//
type BaseplateServiceV2Client struct {
  c thrift.TClient
}

func NewBaseplateServiceV2ClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BaseplateServiceV2Client {
  return &BaseplateServiceV2Client{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewBaseplateServiceV2ClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BaseplateServiceV2Client {
  return &BaseplateServiceV2Client{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewBaseplateServiceV2Client(c thrift.TClient) *BaseplateServiceV2Client {
  return &BaseplateServiceV2Client{
    c: c,
  }
}

func (p *BaseplateServiceV2Client) Client_() thrift.TClient {
  return p.c
}
// Return whether or not the service is healthy.
// 
// The healthchecker (baseplate.server.healthcheck) expects this endpoint to
// exist so it can determine your service's health.
// 
// This should return True if the service is healthy. If the service is
// unhealthy, it can return False or raise an exception.
// 
// 
// Parameters:
//  - Request
func (p *BaseplateServiceV2Client) IsHealthy(ctx context.Context, request *IsHealthyRequest) (r bool, err error) {
  var _args6 BaseplateServiceV2IsHealthyArgs
  _args6.Request = request
  var _result7 BaseplateServiceV2IsHealthyResult
  if err = p.Client_().Call(ctx, "is_healthy", &_args6, &_result7); err != nil {
    return
  }
  return _result7.GetSuccess(), nil
}

type BaseplateServiceV2Processor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler BaseplateServiceV2
}

func (p *BaseplateServiceV2Processor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *BaseplateServiceV2Processor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *BaseplateServiceV2Processor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewBaseplateServiceV2Processor(handler BaseplateServiceV2) *BaseplateServiceV2Processor {

  self8 := &BaseplateServiceV2Processor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self8.processorMap["is_healthy"] = &baseplateServiceV2ProcessorIsHealthy{handler:handler}
return self8
}

func (p *BaseplateServiceV2Processor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin(ctx)
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x9 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x9.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x9

}

type baseplateServiceV2ProcessorIsHealthy struct {
  handler BaseplateServiceV2
}

func (p *baseplateServiceV2ProcessorIsHealthy) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BaseplateServiceV2IsHealthyArgs{}
  if err = args.Read(ctx, iprot); err != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin(ctx, "is_healthy", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, err
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := BaseplateServiceV2IsHealthyResult{}
  var retval bool
  var err2 error
  if retval, err2 = p.handler.IsHealthy(ctx, args.Request); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, err2
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing is_healthy: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "is_healthy", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "is_healthy", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type BaseplateServiceV2IsHealthyArgs struct {
  Request *IsHealthyRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewBaseplateServiceV2IsHealthyArgs() *BaseplateServiceV2IsHealthyArgs {
  return &BaseplateServiceV2IsHealthyArgs{}
}

var BaseplateServiceV2IsHealthyArgs_Request_DEFAULT *IsHealthyRequest
func (p *BaseplateServiceV2IsHealthyArgs) GetRequest() *IsHealthyRequest {
  if !p.IsSetRequest() {
    return BaseplateServiceV2IsHealthyArgs_Request_DEFAULT
  }
return p.Request
}
func (p *BaseplateServiceV2IsHealthyArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *BaseplateServiceV2IsHealthyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BaseplateServiceV2IsHealthyArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &IsHealthyRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *BaseplateServiceV2IsHealthyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "is_healthy_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BaseplateServiceV2IsHealthyArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *BaseplateServiceV2IsHealthyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BaseplateServiceV2IsHealthyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BaseplateServiceV2IsHealthyResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBaseplateServiceV2IsHealthyResult() *BaseplateServiceV2IsHealthyResult {
  return &BaseplateServiceV2IsHealthyResult{}
}

var BaseplateServiceV2IsHealthyResult_Success_DEFAULT bool
func (p *BaseplateServiceV2IsHealthyResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return BaseplateServiceV2IsHealthyResult_Success_DEFAULT
  }
return *p.Success
}
func (p *BaseplateServiceV2IsHealthyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BaseplateServiceV2IsHealthyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BaseplateServiceV2IsHealthyResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *BaseplateServiceV2IsHealthyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "is_healthy_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BaseplateServiceV2IsHealthyResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BaseplateServiceV2IsHealthyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BaseplateServiceV2IsHealthyResult(%+v)", *p)
}


